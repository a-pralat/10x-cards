import { z } from "zod";

/**
 * Parameters for configuring the model's behavior
 */
export interface ModelParameters {
  /** Controls randomness: 0 is deterministic, higher values are more random (range: 0-2) */
  temperature?: number;

  /** Nucleus sampling: only sample from the top_p probability mass (range: 0-1) */
  top_p?: number;

  /** Penalizes repeated tokens (range: -2 to 2) */
  frequency_penalty?: number;

  /** Penalizes tokens that appear in the prompt (range: -2 to 2) */
  presence_penalty?: number;
}

/**
 * Message object for API requests
 */
export interface Message {
  /** The role of the message sender (system or user) */
  role: "system" | "user";

  /** The content of the message */
  content: string;
}

/**
 * JSON Schema response format configuration
 */
export interface ResponseFormat {
  /** The type of response format (currently only json_schema is supported) */
  type: "json_schema";

  /** The JSON schema that the response should conform to */
  json_schema: Record<string, unknown>;
}

/**
 * Request payload structure for OpenRouter API
 */
export interface RequestPayload {
  /** Array of messages for the conversation */
  messages: Message[];

  /** The model identifier to use for generation */
  model: string;

  /** Optional response format configuration for structured responses */
  response_format?: ResponseFormat;

  /** Controls randomness: 0 is deterministic, higher values are more random */
  temperature?: number;

  /** Nucleus sampling: only consider tokens with cumulative probability <= top_p */
  top_p?: number;

  /** Penalizes repeated tokens */
  frequency_penalty?: number;

  /** Penalizes tokens that appear in the prompt */
  presence_penalty?: number;
}

/**
 * Message structure in API responses
 */
export interface ResponseMessage {
  /** The content of the message */
  content: string;

  /** The role of the message sender */
  role: string;
}

/**
 * Choice structure in API responses
 */
export interface ResponseChoice {
  /** The message generated by the model */
  message: ResponseMessage;
}

/**
 * Response structure from OpenRouter API
 */
export interface ApiResponse {
  /** Array of generated choices/completions */
  choices: ResponseChoice[];
}

/**
 * Custom error class for OpenRouter-specific errors
 */
export class OpenRouterError extends Error {
  /**
   * Creates a new OpenRouterError
   * @param message - Error message
   * @param code - Error code for programmatic handling
   * @param status - HTTP status code (if applicable)
   */
  constructor(
    message: string,
    public readonly code: string,
    public readonly status?: number
  ) {
    super(message);
    this.name = "OpenRouterError";
  }
}

// Zod Schemas for validation

/**
 * Schema for model parameters
 */
export const modelParametersSchema = z.object({
  temperature: z.number().min(0).max(2).optional(),
  top_p: z.number().min(0).max(1).optional(),
  frequency_penalty: z.number().min(-2).max(2).optional(),
  presence_penalty: z.number().min(-2).max(2).optional(),
});

/**
 * Schema for individual messages
 */
export const messageSchema = z.object({
  role: z.enum(["system", "user"]),
  content: z.string().min(1),
});

/**
 * Schema for JSON schema response format
 */
export const responseFormatSchema = z.object({
  type: z.literal("json_schema"),
  json_schema: z.object({
    name: z.string(),
    schema: z.object({
      type: z.literal("object"),
      properties: z.record(z.unknown()),
      required: z.array(z.string()),
    }),
  }),
});

/**
 * Schema for request payload validation
 */
export const requestPayloadSchema = z.object({
  messages: z.array(messageSchema).min(1),
  model: z.string().min(1),
  response_format: responseFormatSchema.optional(),
  temperature: z.number().min(0).max(2).optional(),
  top_p: z.number().min(0).max(1).optional(),
  frequency_penalty: z.number().min(-2).max(2).optional(),
  presence_penalty: z.number().min(-2).max(2).optional(),
});

/**
 * Schema for response message validation
 */
export const responseMessageSchema = z.object({
  content: z.string(),
  role: z.string(),
});

/**
 * Schema for response choice validation
 */
export const responseChoiceSchema = z.object({
  message: responseMessageSchema,
});

/**
 * Schema for API response validation
 */
export const apiResponseSchema = z.object({
  choices: z.array(responseChoiceSchema),
});
